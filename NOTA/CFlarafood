 4--------------PERFIS --permissionS--------------------------------------------------------------------------
  # php artisan make:model Models\permission -m  --------------------------------USEI ESSA 
CRIOU A MODEL permissionS E A MIGRATION permissionS DENTRO DE MODELS
VAMOS EM NIGATTION permissionS e DEFININOS AS COLUNAS DE NOSSA TABELA
  public function up()
    {
        Schema::create('permissions', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('name')->unique();
                   
            $table->string('description')->nullable();
            $table->timestamps();
        });
    }
-------------------------------------------------------
 E NA MODELS permissionS DEFININOS NOSSO fillable (permisao de dados no BD)
 class permission extends Model
{
    protected $fillable = ['name',  'description'];
}

---------------------CRIAR A TABELA----------------------------------
# php artisan migrate                              USEI ESSA
# php artisan make:migration create_permissions_table

-----VAMOS NO ARQUIVO BOOTSTRAO\CONFIG\adminlte.php E CONFIGURA A DASHBOARD
ACHAR ICON EM https://fontawesome.com/icons?d=gallery
'menu' => [
                   
        [
            'text' => 'Planos',
            'url'  => 'admin/plans',
            'icon' =>'fas fa-list-ol'
        ],
        [
            'text'        => 'Perfis',
            'url'         => 'admin/permissions',
            'icon'        => 'fas fa-address-book',
           
        ],

---------------------  FAZER LISTAGEM DOS PERFIS (metodo index)---------------------

-----PRIMEIRAMENTE COMEÇAMOS COM AS ROTAS DOS PERFIS EM WEB.PHP  E VAMOS FAZER PELO METODO resource--------------------
Route::resource('permissions', 'ACL\permissionController')

---------LOGO EM SEGUIDA CRIAMOS OS CONTROLLER QUE VAI FICAR EM Admin\ACL
# php artisan make:controller Admin\ACL\permissionController


---------O CONSTRUCTOR -> EM permissionController CRIAMOS UMA VARIAVEL PARA ARMAZENAR UM OBJETO DE permission-----------------------------------
class permissionController extends Controller
{
    protected $repository;

    public function __construct(permission $permission)
    {
        $this->repository = $permission;

        $this->middleware(['can:permissions']);
    }
---------E PARA LISTAR NO METODO INDEX ARMAZENAOS O REULSTADO EM UMA VAIAVEL $permission
E ENCAMINHA A VARIAVEL QUE ESTA COM O REPOSITORIO PARA A view index
public function index()
    {
        $permissions = $this->repository->paginate();

        return view('admin.pages.permissions.index', compact('permissions'));
    }

-----VAMOS CRIAR NOSSA view EM Admin\pages\permissions\index.blade.php

@stop

@section('content')
   
            <div class="card">
            
        <div class="card-body">

        @include ('admin\includes\alerts')

        <table class="table table-condensed">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th style="width: 50px">Ação</th>

                </tr>

            </thead>
            <body>
                @foreach($permissions as $permission)
                 <tr>
                    <td>{{ $permission->name }}</td>
                    
                    <td style="width: 250px;">
                    <a href="{{ route('permissions.edit',  $permission->id) }}" class="btn btn-warning">EDITAR</a>
                    <a href="{{ route('permissions.show',  $permission->id) }}" class="btn btn-warning">VER</a>
                    </td>
                    </tr>
                @endforeach
            </body>
        </table>
       
    
                </div>
            </div>

            <div class="card-footer">

                @if (isset ($filters)) 
                {!! $permissions->appends($filters)->links() !!}
                @else
                 {!! $permissions->links() !!}
                @endif

               
            </div>

@stop

----------------------------------------------------------------OK 

-----------------VAMOS CADASTRAR NOVO PERFIL-----------------------------------------ATENÇÂO AQUI
PODERIA DIVIDR A view...CRIAMOS UM DIRETORIO ..Partials\form.dlade.php E LEVAVA TUDO EM 
EM COMUM PARA LA , PRINCIPALMEnTE O FORM DE INSERÇÂO E CHAMARIA PELO @include
ONDE DESEJAR.........VOU FAZER A PAGINA (view) COMPLETO..... NAO VOU PARTIAR

----CRIAMOS NOSSA View...Admin\pages\permissions\create.blade,php
@extends('adminlte::page')

@section('title', 'Cadastrando Novo Perfil')

@section('content_header')
<h1>Cadastrando Novo Perfil  </h1>

@stop

@section('content')
   
            <div class="card">
            <div class="card-body">
            <form action="{{route('permissions.store')}}" class="form" method="POST" >
@csrf
@include('admin.includes.alerts')
<div class=form-group>
    <label>NOME</label>
<input class="form-control" type="text" name="name" placeholder="name" value=" {{$permission->name ?? old('name')}} ">
</div>
<div class=form-group>
<label>DESCRIÇÃO</label>
<input type="text" class="form-control" name="description" placeholder="description" value="{{$permission->description ?? old('description')}} ">
</div>
<div class=form-group>
<button type="submit" class="btn btn-success">Enviar</button>
</div>
</form>

            </div>
            </div>


@endsection    

-------------------VAMOS NO permissionSCONTROLLER E EXIBIMOS NOSSA VIEW CODIFICANDO O METODO create 
public function create()
    {
        return view('admin.pages.permissions.create');
    }

---E NO METODO STORE 9que faz o cadastro em si) PEGAR_MOS NOSSO REPOSITORIO DE DADOS E
REDIRECIONAR PARA view DE LISTAGEM
 //  public function store(StoreUpdatepermission $request)
   public function store(Request $request)
    {
        $this->repository->create($request->all());

        return redirect()->route('permissions.index');
    }

 ------ E AGORA VAMOS NA MODEL permissionS E LIBERAMOS OS CAMPOS QUE PODEM RECEBER INSERÇÂO   (fillable)
 class permission extends Model
{
    protected $fillable = ['name',  'description'];
}

------------------------------------------------------------------------------OK PERFEITO Cadastrando

--------------------EDITAR PERFIM--------------------------------
VAMOS CRIAR A view EDITAR
@extends('adminlte::page')

@section('title', "EDITANDO Perfis {$permission->name}")

@section('content_header')
<h1>EDITANDO Perfis {{$permission->name}}  </h1>

@stop

@section('content')
   
            <div class="card">
            <div class="card-body">
            <form action="{{route('permissions.update', $permission->id)}}" class="form" method="POST" >
@csrf
@method('PUT')


<div class=form-group>
    <label>NOME</label>
<input class="form-control" type="text" name="name" placeholder="name" value="{{$permission->name}}">
</div>
<div class=form-group>
<label>DESCRIÇÃO</label>
<input type="text" class="form-control" name="description" placeholder="description" value="{{$permission->description}}">
</div>
<div class=form-group>
<button type="submit" class="btn btn-success">Enviar</button>
</div>
</form>

            </div>
            </div>


@endsection        

---VAMOS EM permissionSCONTROLLER E CODIFICAR O METODO EDIT 
RECUPARA OS DADOS PELO ID , E FAZ UM CONDICIONAL, SE NAO ENCONTRAR REDIRECT E SE 
ENCONTRAR RETORNA A VIEW EDIT PASSADNDO AVARIAVEL $permission PEMO METODO compact()
 public function edit($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.edit', compact('permission'));
    }


-----E METODO update QUE VAI EFETIVAMENTE EDIT CODIFICAMOS, RECEBE OS DADOS PELO id 
E FAZ O UPDATE DE TODOS PELO $Request()->ALL E MANDA PARA LISTAGEM
 //public function update(StoreUpdatepermission $request, $id)
    public function update(Request $request, $id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->update($request->all());

        return redirect()->route('permissions.index');
    }

---------------------------------------------------------------OK PERFEITO, EDITOU (lembrando que nao 
estamos listando a descrição na listagem, mas esta no BD)

----VAMOS CRIAR A VALIDAÇÂO PARA RESTRINGIR---------------------------

PARA ISSO VAMOS CRIAR UM REQUEST E A CLASSE VAI SER StoreUpdatepermission

# php artisan make:request StoreUpdatepermission

E CODIFICAMOS EM HTPP\REquests -- VALIDAR NORMAL MAS COMO VAMOS RECUPERAR PELO iD , EL VAI PENSAR QUE AQUELE REGISTRO JA EXISTE
ENTAO CRIAMOS UMA EXCESSAO, PEGANDO O SEGNEMTO DA url (id)
public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $id = $this->segment(3);

        return [
            'name' => "required|min:3|max:255|unique:permissions,name,{$id},id",
            'description' => 'nullable|min:3|max:255',
        ];
    }
}


----------AGORA VAMOS EM permissionController e IMPOSTAMOS A CLASSE  StoreUpdatepermission NO INICIO
use App\Http\Requests\StoreUpdatepermission; E SUBSTITUIMOS Request por StoreUpdatepermission No permissionCONTROLLER
PRINCIPALMENTE NO METODO store E Updade


 public function store(StoreUpdatepermission $request)
    //public function store(Request $request)

public function update(StoreUpdatepermission $request, $id)
    //public function update(Request $request, $id)
--------------------------------------------------------------------------------ok PERFEITO JA VALIDANDO

---------------------DELETAR UM PERFIL ------------------------------------
NAO ESTAMOS NOS PREOCUPANDO COM Router POIS DECLARAMOS resource
-----VAMOS CRIAR UMA VIew SHOW...(exibir o perfil ou os dados do pperfil capturado)

@extends('adminlte::page')

@section('title', "DETALHE DO Perfis  {$permission->name} ")

@section('content_header')
<h1>Detalhe do permissionO <b>{{ $permission->name }}</b>  </h1>

@stop

@section('content')

            <div class="card">
            <div class="card-body">
            <ul>
            <li>
            <strong>NOME</strong> {{ $permission->name }}
            </li>
            <li>
            <strong>DESCRIÇÂO</strong> {{ $permission->description }}
            </li>
            
            </ul>
            @include ('admin\includes\alerts')
                <form action=" {{ route('permissions.destroy', $permission->id) }}"  method="POST"  >
                @csrf
                @method('DELETE')
                <button type="submit" class="btn btn-danger"><i class="fas fa-trash"></i>DELETAR O PERFIL {{ $permission->name }}</button>

                
                </form>

            </div>
            </div>
            @endsection

----------------VAMOS NO permission CONTROLE E NO METDO Show RECUPERAMOS OS DADOS PELO id E PASSAMOS O PERFIL(permission)
PELO METODO conpact() PARA A view SHOW (exibição=separação)
public function show($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.show', compact('permission'));
    }

----E NO METODO DETROY RECUOERAMOS ESSE DADO E DELETAMOS, E DEPOIS VOLTAMOS PARA vIEW DE LISTAGEM (index)
public function destroy($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->delete();

        return redirect()->route('permissions.index');
    }

-----AQUI DELETAMOS SEM NENHUMA PERGUNTA OU QUESTIONAMNETO, IMPORTANTE ATENTA QUE NA view ShoW NO FORMULARIO
O BOTAO NOS DIRECIONA PARA O METODO DETROY    
------------------------------------------------------------------------OK PERFEITO EXIBINDO E DELETANDO 

--------------PESQUISA-------------------------------------FICOU PERFEITA
-----CRIAR ROUTER search DO TIPO any()EM router\Web.php E COLOCAR ANTES (acima) DA router resource

Route::any('permissions/search', 'ACL\permissionController@search')->name('permissions.search');       

-----CRIAR  (implementar) METODO search EM permissionSCONTROLLER
 public function search(Request $request)
    {
        $filters = $request->only('filter');

        $permissions = $this->repository
                            ->where(function($query) use ($request) {
                                if ($request->filter) {
                                    $query->where('name', $request->filter);
                                    $query->orWhere('description', 'LIKE', "%{$request->filter}%");
                                }
                            })
                            ->paginate();

        return view('admin.pages.permissions.index', compact('permissions', 'filters'));
    }


-----VAMOS COLOCAR (implementar) UM FORMULARIO DE PESQUISA NA View INDEX permission que ainda nao EXISTE
FICA ASSIM A view INDEX
@extends('adminlte::page')

@section('title', 'perfis')

@section('content_header')


<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="{{route('admin.index')}} ">Dashboard</a></li>
    <li class="breadcrumb-item" aria-current="page"><a href="{{route('permissions.index')}}" >Perfis</a></li>
     </ol>
</nav>

<h1>Perfis <a href="{{route('permissions.create')}}" class="btn btn-dark"><i class="far fa-plus-square"></i></a></h1>

@stop

@section('content')
   
<div class="card">
            <div class="card-header">
        
        <form action="{{ route('permissions.search') }}" method="POST" class="form form-inline">
                @csrf
                <input type="text" name="filter" placeholder="Filtro" class="form-control" value="{{ $filters['filter'] ?? '' }}">
                <button type="submit" class="btn btn-dark">Filtrar</button>
            </form>


                </div>
            
        <div class="card-body">

        @include ('admin\includes\alerts')

        <table class="table table-condensed">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th style="width: 50px">Ação</th>

                </tr>

            </thead>
            <body>
                @foreach($permissions as $permission)
                 <tr>
                    <td>{{ $permission->name }}</td>
                    
                    <td style="width: 250px;">
                    <a href="{{ route('permissions.edit',  $permission->id) }}" class="btn btn-warning">EDITAR</a>
                    <a href="{{ route('permissions.show',  $permission->id) }}" class="btn btn-warning">VER</a>
                    </td>
                    </tr>
                @endforeach
            </body>
        </table>
       
    
                </div>
            </div>

            <div class="card-footer">

                @if (isset ($filters)) 
                {!! $permissions->appends($filters)->links() !!}
                @else
                 {!! $permissions->links() !!}
                @endif

               
            </div>

@stop


-----FICA ASSIM NOSSO permissionCONTROLLER
<?php

namespace App\Http\Controllers\Admin\ACL;

use App\Http\Controllers\Controller;
use App\Http\Requests\StoreUpdatepermission;
use App\Models\permission;
use Illuminate\Http\Request;

class permissionController extends Controller
{
    protected $repository;

    public function __construct(permission $permission)
    {
        $this->repository = $permission;

        // $this->middleware(['can:permissions']);
    }

   
    public function index()
    {
        $permissions = $this->repository->paginate();

        return view('admin.pages.permissions.index', compact('permissions'));
    }

  
    public function create()
    {
        return view('admin.pages.permissions.create');
    }

      

    public function store(StoreUpdatepermission $request)
    //public function store(Request $request)
    {
        $this->repository->create($request->all());

        return redirect()->route('permissions.index');
    }

    
    public function show($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.show', compact('permission'));
    }

   
    public function edit($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.edit', compact('permission'));
    }

   
    public function update(StoreUpdatepermission $request, $id)
    //public function update(Request $request, $id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->update($request->all());

        return redirect()->route('permissions.index');
    }

   
    public function destroy($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->delete();

        return redirect()->route('permissions.index');
    }

     
    
    public function search(Request $request)
    {
        $filters = $request->only('filter');

        $permissions = $this->repository
                            ->where(function($query) use ($request) {
                                if ($request->filter) {
                                    $query->where('name', $request->filter);
                                    $query->orWhere('description', 'LIKE', "%{$request->filter}%");
                                }
                            })
                            ->paginate();

        return view('admin.pages.permissions.index', compact('permissions', 'filters'));
    }

}

-----------------------------------------------------------------
5-----------PERMISSÕES---------------------------------------
 # php artisan make:model Models\Permission  -m  --------------------------------USEI ESSA 
CRIOU A MODEL permissionS E A MIGRATION permissionS DENTRO DE MODELS
VAMOS EM NIGATTION permissionS e DEFININOS AS COLUNAS DE NOSSA TABELA
public function up()
    {
        Schema::create('permissions', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('name')->unique();
            $table->string('description')->nullable();
            $table->timestamps();
        });
    }

 ------------------------------------------------------
 E NA MODELS permissionS DEFININOS NOSSO fillable (permisao de dados no BD)
 class Permission extends Model
{
    protected $fillable = ['name',  'description'];
}   

---------------------CRIAR A TABELA----------------------------------
# php artisan migrate                              USEI ESSA
# php artisan make:migration create_permissions_table

-----VAMOS NO ARQUIVO BOOTSTRAO\CONFIG\adminlte.php E CONFIGURA A DASHBOARD
ACHAR ICON EM https://fontawesome.com/icons?d=gallery
'menu' => [
                   
        [
            'text' => 'Planos',
            'url'  => 'admin/plans',
            'icon' =>'fas fa-list-ol'
        ],
        [
            'text'        => 'Perfis',
            'url'         => 'admin/permissions',
            'icon'        => 'fas fa-address-book',
           
        ],

---------------------  FAZER LISTAGEM DOS PERFIS (metodo index)---------------------

-----PRIMEIRAMENTE COMEÇAMOS COM AS ROTAS DOS PERFIS EM WEB.PHP  E VAMOS FAZER PELO METODO resource e search--------------------
 /* ROTA DAS PERMISSÕES 
            */
            Route::any('permissions/search', 'ACL\PermissionController@search')->name('permissions.search');        
            Route::resource('permissions', 'ACL\PermissionController');


---------LOGO EM SEGUIDA CRIAMOS OS CONTROLLER QUE VAI FICAR EM Admin\ACL
# php artisan make:controller Admin\ACL\PermissionController

TEMOS QUE CONFERIR A CLASSE use App\Models\Permission;


---FAZEMOS O CONSTRUCTOR INICIALMENTE 
class PermissionController extends Controller
{
    //
    protected $repository;

    public function __construct(Permission $permission)
    {
        $this->repository = $permission;

       // $this->middleware(['can:permissions']);
    }
---------E PARA LISTAR NO METODO INDEX ARMAZENAOS O REULSTADO EM UMA VAIAVEL $permission
E ENCAMINHA A VARIAVEL QUE ESTA COM O REPOSITORIO PARA A view index
public function index()
    {
        $permissions = $this->repository->paginate();

        return view('admin.pages.permissions.index', compact('permissions'));
    }

-----VAMOS CRIAR NOSSA view EM Admin\pages\permissions\index.blade.php

@extends('adminlte::page')

@section('title', 'Permissões')

@section('content_header')


<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="{{route('admin.index')}} ">Dashboard</a></li>
    <li class="breadcrumb-item" aria-current="page"><a href="{{route('permissions.index')}}" >Perfis</a></li>
     </ol>
</nav>

<h1>Permissões <a href="{{route('permissions.create')}}" class="btn btn-dark">ADD</i></a></h1>

@stop

@section('content')
   
<div class="card">
            <div class="card-header">
            <form action="{{ route('permissions.search') }}" method="POST" class="form form-inline">
                @csrf
                <input type="text" name="filter" placeholder="Filtro" class="form-control" value="{{ $filters['filter'] ?? '' }}">
                <button type="submit" class="btn btn-dark"><i class="fas fa-search"></i></button>
            </form>
                </div>
            
        <div class="card-body">

        @include ('admin\includes\alerts')

        <table class="table table-condensed">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th style="width: 50px">Ação</th>

                </tr>

            </thead>
            <body>
                @foreach($permissions as $permission)
                 <tr>
                    <td>{{ $permission->name }}</td>
                    
                    <td style="width: 150px;">
                    <a href="{{ route('permissions.edit',  $permission->id) }}" class="btn btn-warning"><i class="fas fa-edit"></i></a>
                    <a href="{{ route('permissions.show',  $permission->id) }}" class="btn btn-warning"><i class="fas fa-filter"></i></a>
                    </td>
                    </tr>
                @endforeach
            </body>
        </table>
       
    
                </div>
            </div>

            <div class="card-footer">

                @if (isset ($filters)) 
                {!! $permissions->appends($filters)->links() !!}
                @else
                 {!! $permissions->links() !!}
                @endif

               
            </div>

@stop

----------------------------------------------------------------OK 

-----------------VAMOS CADASTRAR NOVO PERMISSÂO-----------------------------------------ATENÇÂO AQUI
PODERIA DIVIDR A view...CRIAMOS UM DIRETORIO ..Partials\form.blade.php E LEVAVA TUDO EM 
EM COMUM PARA LA , PRINCIPALMEnTE O FORM DE INSERÇÂO E CHAMARIA PELO @include
ONDE DESEJAR.........VOU FAZER A PAGINA (view) COMPLETO..... NAO VOU PARTIAR

----CRIAMOS NOSSA View...Admin\pages\permissions\create.blade,php
@extends('adminlte::page')

@section('title', 'Cadastrando Novo Perfil')

@section('content_header')
<h1>Cadastrando Novo Perfil  </h1>

@stop

@section('content')
   
            <div class="card">
            <div class="card-body">
            <form action="{{route('permissions.store')}}" class="form" method="POST" >
@csrf
@include('admin.includes.alerts')
<div class=form-group>
    <label>NOME</label>
<input class="form-control" type="text" name="name" placeholder="name" value=" {{$permission->name ?? old('name')}} ">
</div>
<div class=form-group>
<label>DESCRIÇÃO</label>
<input type="text" class="form-control" name="description" placeholder="description" value="{{$permission->description ?? old('description')}} ">
</div>
<div class=form-group>
<button type="submit" class="btn btn-success">Enviar</button>
</div>
</form>

            </div>
            </div>


@endsection    

-------------------VAMOS NO permissionSCONTROLLER E EXIBIMOS NOSSA VIEW CODIFICANDO O METODO create 
public function create()
    {
        return view('admin.pages.permissions.create');
    }

---E NO METODO STORE que faz o cadastro em si) PEGAR_MOS NOSSO REPOSITORIO DE DADOS E
REDIRECIONAR PARA view DE LISTAGEM
 //  public function store(StoreUpdatepermission $request)
   public function store(Request $request)
    {
        $this->repository->create($request->all());

        return redirect()->route('permissions.index');
    }

 ------ E AGORA VAMOS NA MODEL permissionS E LIBERAMOS OS CAMPOS QUE PODEM RECEBER INSERÇÂO   (fillable)
 class permission extends Model
{
    protected $fillable = ['name',  'description'];
}

------------------------------------------------------------------------------OK PERFEITO Cadastrando

--------------------EDITAR PERFIM--------------------------------
VAMOS CRIAR A view EDITAR
@extends('adminlte::page')

@section('title', "EDITANDO A PERMISÃO {$permission->name}")

@section('content_header')
<h1>EDITANDO PERMISÃO {{$permission->name}}  </h1>

@stop

@section('content')
   
            <div class="card">
            <div class="card-body">
            <form action="{{route('permissions.update', $permission->id)}}" class="form" method="POST" >
@csrf
@method('PUT')


<div class=form-group>
    <label>NOME</label>
<input class="form-control" type="text" name="name" placeholder="name" value="{{$permission->name}}">
</div>
<div class=form-group>
<label>DESCRIÇÃO</label>
<input type="text" class="form-control" name="description" placeholder="description" value="{{$permission->description}}">
</div>
<div class=form-group>
<button type="submit" class="btn btn-success">Enviar</button>
</div>
</form>

            </div>
            </div>


@endsection        

------------------------------------------------------------------------------

---VAMOS EM permissionSCONTROLLER E CODIFICAR O METODO EDIT 
RECUPARA OS DADOS PELO ID , E FAZ UM CONDICIONAL, SE NAO ENCONTRAR REDIRECT E SE 
ENCONTRAR RETORNA A VIEW EDIT PASSADNDO AVARIAVEL $permission PEMO METODO compact()
 public function edit($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.edit', compact('permission'));
    }


-----E NO METODO update QUE VAI EFETIVAMENTE EDIT CODIFICAMOS, RECEBE OS DADOS PELO id 
E FAZ O UPDATE DE TODOS PELO $Request()->ALL E MANDA PARA LISTAGEM
 //public function update(StoreUpdatepermission $request, $id)  //AQUI È NA VALIDAÇÂO
    public function update(Request $request, $id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->update($request->all());

        return redirect()->route('permissions.index');
    }

---------------------------------------------------------------OK PERFEITO, EDITOU (lembrando que nao 
estamos listando a descrição na listagem, mas esta no BD)

----VAMOS CRIAR A VALIDAÇÂO PARA RESTRINGIR---------------------------

PARA ISSO VAMOS CRIAR UM REQUEST E A CLASSE VAI SER StoreUpdatepermission

# php artisan make:request StoreUpdatePermission

E CODIFICAMOS EM HTPP\REquests -- VALIDAR NORMAL MAS COMO VAMOS RECUPERAR PELO iD , EL VAI PENSAR QUE AQUELE REGISTRO JA EXISTE
ENTAO CRIAMOS UMA EXCESSAO, PEGANDO O SEGNEMTO DA url (id)
EXEMPLO: MO ENDEREÇO http://127.0.0.1:8000/admin/permissions/2/edit ----O numero 2 (id)é o terceiro segmento
public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $id = $this->segment(3);

        return [
            'name' => "required|min:3|max:255|unique:permissions,name,{$id},id",
            'description' => 'nullable|min:3|max:255',
        ];
    }
}


----------AGORA VAMOS EM permissionController e IMPOSTAMOS A CLASSE  StoreUpdatepermission NO INICIO
use App\Http\Requests\StoreUpdatepermission; E SUBSTITUIMOS Request por StoreUpdatepermission No permissionCONTROLLER
PRINCIPALMENTE NO METODO store E Updade


 public function store(StoreUpdatePermission $request)
    //public function store(Request $request)

public function update(StoreUpdatePermission $request, $id)
    //public function update(Request $request, $id)
--------------------------------------------------------------------------------ok PERFEITO JA VALIDANDO

---------------------DELETAR UM PERFIL ------------------------------------
NAO ESTAMOS NOS PREOCUPANDO COM Router POIS DECLARAMOS resource
-----VAMOS CRIAR UMA VIew SHOW...(exibir o perfil ou os dados do pperfil capturado)

@extends('adminlte::page')

@section('title', "DETALHE DO Perfis  {$permission->name} ")

@section('content_header')
<h1>Detalhe do permissionO <b>{{ $permission->name }}</b>  </h1>

@stop

@section('content')

            <div class="card">
            <div class="card-body">
            <ul>
            <li>
            <strong>NOME</strong> {{ $permission->name }}
            </li>
            <li>
            <strong>DESCRIÇÂO</strong> {{ $permission->description }}
            </li>
            
            </ul>
            @include ('admin\includes\alerts')
                <form action=" {{ route('permissions.destroy', $permission->id) }}"  method="POST"  >
                @csrf
                @method('DELETE')
                <button type="submit" class="btn btn-danger"><i class="fas fa-trash"></i>DELETAR O PERFIL {{ $permission->name }}</button>

                
                </form>

            </div>
            </div>
            @endsection

----------------VAMOS NO permissionCONTROLE E NO METDO Show RECUPERAMOS OS DADOS PELO id E PASSAMOS O PERFIL(permission)
PELO METODO conpact() PARA A view SHOW (exibição=separação)
public function show($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.show', compact('permission'));
    }

----E NO METODO DETROY RECUPERAMOS ESSE DADO E DELETAMOS, E DEPOIS VOLTAMOS PARA vIEW DE LISTAGEM (index)
public function destroy($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->delete();

        return redirect()->route('permissions.index');
    }

-----AQUI DELETAMOS SEM NENHUMA PERGUNTA OU QUESTIONAMNETO, IMPORTANTE ATENTA QUE NA view ShoW NO FORMULARIO
O BOTAO NOS DIRECIONA PARA O METODO DETROY    
------------------------------------------------------------------------OK PERFEITO EXIBINDO E DELETANDO 
   
  --------------PESQUISA-------------------------------------FICOU PERFEITA
-----CRIAR ROUTER search DO TIPO any()EM router\Web.php E COLOCAR ANTES (acima) DA router resource

Route::any('permissions/search', 'ACL\PermissionController@search')->name('permissions.search');       

-----CRIAR  (implementar) METODO search EM PermissionSCONTROLLER
 public function search(Request $request)
    {
        $filters = $request->only('filter');

        $permissions = $this->repository
                            ->where(function($query) use ($request) {
                                if ($request->filter) {
                                    $query->where('name', $request->filter);
                                    $query->orWhere('description', 'LIKE', "%{$request->filter}%");
                                }
                            })
                            ->paginate();

        return view('admin.pages.permissions.index', compact('permissions', 'filters'));
    }


-----VAMOS COLOCAR (implementar) UM FORMULARIO DE PESQUISA NA View INDEX Permission que ainda nao EXISTE  --JA TEM----OK PERFEITO
FICA ASSIM A view INDEX
@extends('adminlte::page')

@section('title', 'perfis')

@section('content_header')


<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="{{route('admin.index')}} ">Dashboard</a></li>
    <li class="breadcrumb-item" aria-current="page"><a href="{{route('permissions.index')}}" >Perfis</a></li>
     </ol>
</nav>

<h1>Perfis <a href="{{route('permissions.create')}}" class="btn btn-dark"><i class="far fa-plus-square"></i></a></h1>

@stop

@section('content')
   
<div class="card">
            <div class="card-header">
        
        <form action="{{ route('permissions.search') }}" method="POST" class="form form-inline">
                @csrf
                <input type="text" name="filter" placeholder="Filtro" class="form-control" value="{{ $filters['filter'] ?? '' }}">
                <button type="submit" class="btn btn-dark">Filtrar</button>
            </form>


                </div>
            
        <div class="card-body">

        @include ('admin\includes\alerts')

        <table class="table table-condensed">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th style="width: 50px">Ação</th>

                </tr>

            </thead>
            <body>
                @foreach($permissions as $permission)
                 <tr>
                    <td>{{ $permission->name }}</td>
                    
                    <td style="width: 250px;">
                    <a href="{{ route('permissions.edit',  $permission->id) }}" class="btn btn-warning">EDITAR</a>
                    <a href="{{ route('permissions.show',  $permission->id) }}" class="btn btn-warning">VER</a>
                    </td>
                    </tr>
                @endforeach
            </body>
        </table>
       
    
                </div>
            </div>

            <div class="card-footer">

                @if (isset ($filters)) 
                {!! $permissions->appends($filters)->links() !!}
                @else
                 {!! $permissions->links() !!}
                @endif

               
            </div>

@stop


-----FICA ASSIM NOSSO PermissionCONTROLLER
<?php

namespace App\Http\Controllers\Admin\ACL;

use App\Http\Controllers\Controller;
use App\Http\Requests\StoreUpdatePermission;
use App\Models\Permission;
use Illuminate\Http\Request;

class PermissionController extends Controller
{
    protected $repository;

    public function __construct(Permission $permission)
    {
        $this->repository = $permission;

        // $this->middleware(['can:permissions']);
    }

   
    public function index()
    {
        $permissions = $this->repository->paginate();

        return view('admin.pages.permissions.index', compact('permissions'));
    }

  
    public function create()
    {
        return view('admin.pages.permissions.create');
    }

      

    public function store(StoreUpdatePermission $request)
    //public function store(Request $request)
    {
        $this->repository->create($request->all());

        return redirect()->route('permissions.index');
    }

    
    public function show($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.show', compact('permission'));
    }

   
    public function edit($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        return view('admin.pages.permissions.edit', compact('permission'));
    }

   
    public function update(StoreUpdatePermission $request, $id)
    //public function update(Request $request, $id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->update($request->all());

        return redirect()->route('permissions.index');
    }

   
    public function destroy($id)
    {
        if (!$permission = $this->repository->find($id)) {
            return redirect()->back();
        }

        $permission->delete();

        return redirect()->route('permissions.index');
    }

     
    
    public function search(Request $request)
    {
        $filters = $request->only('filter');

        $permissions = $this->repository
                            ->where(function($query) use ($request) {
                                if ($request->filter) {
                                    $query->where('name', $request->filter);
                                    $query->orWhere('description', 'LIKE', "%{$request->filter}%");
                                }
                            })
                            ->paginate();

        return view('admin.pages.permissions.index', compact('permissions', 'filters'));
    }

}

----------------------------------------------------------------- FUNCIONANDO, mas o LIKE NAO ESTA PEGANDO

6-----  RELACIOMAMENTO PERMISSÕES X Perfil-------------------------------------

VAMOS FAZER UMA TABELA PIVO, MAS PODE SER FEITO O RALCIONAMNETO NA PROPIA MIGRATION
NO NOSSO CASO VAMOS FAZER SEPARADO  E VAI SER UM REL N:N (um perfilpode ter varias permissões e vice-verso)

-------COMO VAI SER SEPARADA , ENTAO VAMOS CRIAR UM NOVA MIGRATION

# php artisan make:migration create_permission_profile_table

---------------- E CODIFICAR A MIGRATION permission_profile COM AS CHAVES ESTRANGEIRA PELO iD DAS TABELAS permissions e profiles
que ja temos no BD
public function up()
    {
        Schema::create('permission_profile', function (Blueprint $table) {
             $table->bigIncrements('id');
            $table->unsignedBigInteger('permission_id');
            $table->unsignedBigInteger('profile_id');

            $table->foreign('permission_id')
                        ->references('id')
                        ->on('permissions')
                        ->onDelete('cascade');
            $table->foreign('profile_id')
                        ->references('id')
                        ->on('profiles')
                        ->onDelete('cascade');
        });

------------ RODAR MIGRATE PARA FAZER A TABELA PIVÓ NO BD

# php artisan migrate

-------------------------------------OK PERFEITO 

---------------------CRIAR ROTA (profiles.permissions)
 /* ROTA DAS PERMISSÕES X PERFIL 
            */

            Route::get('profiles/{id}/permissions', 'ACL\PermissionProfileController')->name('profiles.permissions');   


----PROXIMO PASSO COLOCAR UM BOTAO NA NOSSA VIEW Admin\pages\profiles\index.blade.php
@foreach($profiles as $profile)
                 <tr>
                    <td>{{ $profile->name }}</td>
                    
                    <td style="width: 250px;">
                    <a href="{{ route('profiles.edit',  $profile->id) }}" class="btn btn-warning">EDITAR</a>
                    <a href="{{ route('profiles.show',  $profile->id) }}" class="btn btn-warning">VER</a>
                    <a href="{{ route('profiles.permissions',  $profile->id) }}" class="btn btn-warning"><i class="fas fa-unlock-alt"></i></a>
                    </td>
                    </tr>
                @endforeach
            </body>

----------- E ENTAO VAMOS CRIAR NOSSO CONTROLLER (PermissionProfileController)           

# php artisan make:controller Admin\ACL\PermissionProfileController

OBS: SE DER UM ERRO (e vai dar ) È PQ JA TEMOS A ROTA DECLARADA, BOM COMETAR ELA PARA RODAR O make:controller FAREMOS ISSO EM
router\web.php

// Route::get('profiles/{id}/permissions', 'ACL\PermissionProfileController')->name('profiles.permissions')

------IR NA MODElS\Profile e LIBERAR RELACIONAMENTO 
// RELACIONAMENTO DAS PERMISSÔES - ESSA SER AS PERMISSOES POSSIVEL NUM PERFIL
 public function permissions() {
    return $this->belongsToMany(permission::class);
}   

----FAÇO O MESMO PARA MODELS\Permission
// RELACIONAMENTO DOS PERFIS - ESSss são os PERFIS POSSIVEL NUMA PERMISSÂO
    public function profiles() {
    return $this->belongsToMany(profile::class);
}   



---PRONTO JA ESTAMOS COM A PermissionProfileController CRIADO VAMOS CODIFICAR (nao esquecer de decometar a router)
---ESSA CODIFICAÃO VAI SER BEM DIFERENTE DO OUTROS CONTROLLER
---COMO SEMPRE VAMOS COMEÇAR PELO CONSTRUCT CO DUAS VARIAVEIS ($profile, $prermission)
 protected $profile, $permission;

    public function __construct(Profile $profile, Permission $permission)
    {
        $this->profile = $profile;
        $this->permission = $permission;

       //  $this->middleware(['can:profiles']);
    }

---E VAMOS FAZER É LISTAR AS PERMISSÕES DE UM PERFIL ----RECUPERANDO NOSSOS profile PELO id   EM UMA Function 
 public function permissions($idProfile)
    {
        $profile = $this->profile->find($idProfile);

        if (!$profile) {
            return redirect()->back();
        }

        $permissions = $profile->permissions()->paginate();

        return view('admin.pages.profiles.permissions.permissions', compact('profile', 'permissions'));
    }

------------- VANOS FAZER A view de LISTAGEM DAS PERMISSÕES DE UM PERFIL    admin.pages.profiles.permissions.permissions
@extends('adminlte::page')

@section('title', "Permissões do perfil {$profile->name}")

@section('content_header')
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="{{ route('admin.index') }}">Dashboard</a></li>
        <li class="breadcrumb-item active"><a href="{{ route('profiles.index') }}" class="active">Perfis</a></li>
    </ol>

    <h1>Permissões do perfil <strong>{{ $profile->name }}</strong></h1>

    <a href="{{ route('profiles.permissions.available', $profile->id) }}" class="btn btn-dark">ADD NOVA PERMISSÃO</a>

@stop

@section('content')
    <div class="card">
        <div class="card-body">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th width="50">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach ($permissions as $permission)
                        <tr>
                            <td>
                                {{ $permission->name }}
                            </td>
                           
                        </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            @if (isset($filters))
                {!! $permissions->appends($filters)->links() !!}
            @else
                {!! $permissions->links() !!}
            @endif
        </div>
    </div>
@stop

-----------------------------------OK   LISTAGEM DAS PERMISSÕES DE UM PERFIL    VAI MUDAR


------- Vincular Permissões ao Perfil - PRIMEIRAMENTE VAMOS LISTAR TODAS AS PERMISSÕES PARA DEPOIS ESCOLHER A PERMISSÂO 
-----VAMOS CRIAR UA ROTA 
/* ROTA DAS PERMISSÕES X PERFIL 
            */
           Route::get('profiles/{id}/permissions/create', 'ACL\PermissionProfileController@permissionsAvailable')->name('profiles.permissions.available');  

-----------------NA NOSSA VIER VAMOS NO LINK DE ADD NOVA PERMISSÃO E MUDAMOS A ROTA 'profiles.permissions.available'           
                 <li class="breadcrumb-item" aria-current="page"><a href="{{route('permissions.index')}}" >Perfis</a></li>
     </ol>
</nav>

<h1>Permissão do Perfil {{$profile->name}} <a href="{{'profiles.permissions.available'}}" class="btn btn-dark"><i class="far fa-plus-square"></i></a></h1>

@stop


----- NO NOSSO PermissionProfileController VAMOS CODIFICAR UM METODO COM O NOME permissionsAvailable
POR ENQUANTO NAO VAMOS FILTRAR , VAMOS PEGAR TODOS com $this->permission->All(); ou paginate()
p  public function permissionsAvailable(Request $request, $idProfile)
    {
        if (!$profile = $this->profile->find($idProfile)) {
            return redirect()->back();
        }

      //  $filters = $request->except('_token');

       //  $permissions = $profile->permissionsAvailable($request->filter);

       //$permissions = $this->permission->All();
       $permissions = $this->permission->paginate();

        return view('admin.pages.profiles.permissions.available', compact('profile', 'permissions', 'filters'));
    }
-------------VAMOS CRIAR UMA view   admin.pages.profiles.permissions.available

@extends('adminlte::page')

@section('title', 'Permissões disponíveis perfil {$profile->name}')

@section('content_header')
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="{{ route('admin.index') }}">Dashboard</a></li>
        <li class="breadcrumb-item active"><a href="{{ route('profiles.index') }}" class="active">Perfis</a></li>
    </ol>

    <h1>Permissões disponíveis perfil <strong>{{ $profile->name }}</strong></h1>

@stop

@section('content')
    <div class="card">
        <div class="card-header">
            <form action="{{ route('profiles.permissions.available', $profile->id) }}" method="POST" class="form form-inline">
                @csrf
                <input type="text" name="filter" placeholder="Filtro" class="form-control" value="{{ $filters['filter'] ?? '' }}">
                <button type="submit" class="btn btn-dark">Filtrar</button>
            </form>
        </div>
        <div class="card-body">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th width="50px">#</th>
                        <th>Nome</th>
                    </tr>
                </thead>
                <tbody>
                    <form action="{{ route('profiles.permissions.attach', $profile->id) }} "  method="POST">
                        @csrf

                        @foreach ($permissions as $permission)
                            <tr>
                                <td>
                                    <input type="checkbox" name="permissions[]" value="{{ $permission->id }}">
                                </td>
                                <td>
                                    {{ $permission->name }}
                                </td>
                            </tr>
                        @endforeach

                        <tr>
                            <td colspan="500">
                                @include('admin.includes.alerts')

                                <button type="submit" class="btn btn-success">Vincular</button>
                            </td>
                        </tr>
                    </form>
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            @if (isset($filters))
                {!! $permissions->appends($filters)->links() !!}
            @else
                {!! $permissions->links() !!}
            @endif
        </div>
    </div>
@stop

-----------------------------------------------------ok SEGUINDO (colocar rota)

-----------------VAMOS FAZER UM ROTA DE VINCULAÇÃO
 Route::post('profiles/{id}/permissions', 'ACL\PermissionProfileController@attachPermissionsProfile')->name('profiles.permissions.attach');
 Route::get('profiles/{id}/permissions/create', 'ACL\PermissionProfileController@permissionsAvailable')->name('profiles.permissions.available');  
 Route::get('profiles/{id}/permissions', 'ACL\PermissionProfileController@permissions')->name('profiles.permissions');   

--------------------E COLOCAR ESSA ROTA NO FORMULÁRIO PASSANDO o ID DO PROFILE ($profile->id)

<form action="{{ route('profiles.permissions.attach', $profile->id) }} "  method="POST">
                        @csrf

                        @foreach ($permissions as $permission)

---VAMOS NO PermissionProfileController E CODIFICAMOS O METODO attachPermissionsProfile
SE NAO EXISTE O PERFIL redirecione e se existe apermisao e a quantiae é E IGUAL (checkbox) A ZERO MANDE UMA MENSAGEM DE ALERT
E SE FOR maior que zero OU ATENDER AS CONDICÕES VINCULE E va para VIEW de listagem 
public function attachPermissionsProfile(Request $request, $idProfile)
    {
        if (!$profile = $this->profile->find($idProfile)) {
            return redirect()->back();
        }

        if (!$request->permissions || count($request->permissions) == 0) {
            return redirect()
                        ->back()
                        ->with('info', 'Precisa escolher pelo menos uma permissão');
        }

        $profile->permissions()->attach($request->permissions);

        return redirect()->route('profiles.permissions', $profile->id);
    }

 ----------------FUNCIONANDO MAIS AINDA PRECISA DE AJUSTES  ( QUANDO CKICK EM ADD ainda continua exibindo todos as PERMISSOES, quando era pra so exibir
 as permissoes que nao estavam vinculadas ainda) ----------------------VAMOS AJUSTAR
 
 --VAMOS PermissionProfileController EM NO METODO permissionsAvailable E EM VEZ DE PEGAR 
 TODAS $permissions = $this->permission->paginate(); substituir por ummetofo de filtto
 public function permissionsAvailable(Request $request, $idProfile)
    {
        if (!$profile = $this->profile->find($idProfile)) {
            return redirect()->back();
        }

      //  $filters = $request->except('_token');

        $permissions = $profile->permissionsAvailable($request->filter);

       //$permissions = $this->permission->All();
      //  $permissions = $this->permission->paginate();

        return view('admin.pages.profiles.permissions.available', compact('profile', 'permissions', 'filters'));
    }
 
ANTES TEMOS QUE IR NA NOSSA MODEL profile.php E CRIAR O ME|TODO permissionsAvailable E RECEBER UM FILTER QUE VAMOS CRIAR 
PermissionProfileController E SW NAO EXISTIR RETORNAR NULL
/**
     * Permission not linked with this profile
     */

public function permissionsAvailable($filter = null)
    {
        $permissions = Permission::whereNotIn('permissions.id', function($query) {
            $query->select('permission_profile.permission_id');
            $query->from('permission_profile');
            $query->whereRaw("permission_profile.profile_id={$this->id}");
        })
        ->where(function ($queryFilter) use ($filter) {
            if ($filter)
                $queryFilter->where('permissions.name', 'LIKE', "%{$filter}%");
        })
        ->paginate();

        return $permissions;
    }

------------------------------------------------------------------OK PERFEITO, VINCULANDO E EXIBIDO DOS 2 MODOS
EXIBI INICIALMENTE OS QUE ESTAO VINCULADOS E AO ADD MODULO NAO EXIBI OS JA VINCULADOS


-------Filtrar Permissões disponíveis no LaraFood (quando tivermos centenas de possibilidade de permissões)
---PRIMEIRO PASSO CRIAR ROTA (nao conflita pois esta em tipo any)
Route::any('profiles/{id}/permissions/create', 'ACL\PermissionProfileController@permissionsAvailable')->name('profiles.permissions.available');

VAMOS EM View admin\pages\profiles\permissions\available E CONFERE ROTA DO FILTRO
 <form action="{{ route('profiles.permissions.available', $profile->id) }}" method="POST" class="form form-inline">
                @csrf
                <input type="text" name="filter" placeholder="Filtro" class="form-control" value="{{ $filters['filter'] ?? '' }}">
                <button type="submit" class="btn btn-dark">Filtrar</button>
            </form>

---VAMOS NO PermissionProfileController e vamos pasaar nosso requeste PARA RECEBERR OS DADOS DO FORMULARIO
FAZ UM VARIAVEL FITRO E FITRAR O REQUEST COM EXCEÇÃO DO __TOKEN            
public function permissionsAvailable(Request $request, $idProfile)
    {
        if (!$profile = $this->profile->find($idProfile)) {
            return redirect()->back();
        }

       $filters = $request->except('_token');

        $permissions = $profile->permissionsAvailable($request->filter);

       //$permissions = $this->permission->All();
      //  $permissions = $this->permission->paginate();

        return view('admin.pages.profiles.permissions.available', compact('profile', 'permissions', 'filters'));
    }

----------------------------------------OK PERFEITO   FILTER (filtrando=buscando perfil)

----------AGORA VAMOS REMOVER A PERMISSÂO (Desvincular Permissão do Perfil)

----CRIAR NOSSA ROTA (Ela espera dois id)
Route::get('profiles/{id}/permission/{idPermission}/detach', 'ACL\PermissionProfileController@detachPermissionProfile')->name('profiles.permission.detach');

----VAMOS NO PermissionProfileController e VAMOS FAZER O METODO detachPermissionProfile PARA Desvincular
RECEBE OS DOIS iD-RECUPERA A PERMISSÂO E PERFIL PELO ID - SE ENCONTRAR OS DOIS - DESVINCULAR PELA PERMISSÃO - REDIRECIONAR
 public function detachPermissionProfile($idProfile, $idPermission)
    {
        $profile = $this->profile->find($idProfile);
        $permission = $this->permission->find($idPermission);

        if (!$profile || !$permission) {
            return redirect()->back();
        }

        $profile->permissions()->detach($permission);

        return redirect()->route('profiles.permissions', $profile->id);
    }


---VAMOS NA NOSSA PAGINA DE LISTAGEM DAS PERMISÃO permission.blade.php   E MODIFICA (se ja não tiver)
  <tbody>
                    @foreach ($permissions as $permission)
                        <tr>
                            <td>
                                {{ $permission->name }}
                            </td>
                            <td style="width=10px;">
                                <a href="{{ route('profiles.permission.detach', [$profile->id, $permission->id]) }}" class="btn btn-danger">DESVINCULAR</a>
                            </td>
                        </tr>
                    @endforeach

-----------------------------   OK PERFEITO DESVINCULANDO

-------------------Listar Perfis da Permissão -------------------------------
A LOGICA AQUI È PARA VISUALIZAR O CONTRARIO QUAIS PERFIS ESTA ASSOCIADO AQUELA PERMISSÂO
VAMOS RESOLVER COMLOCANDO UM BOTAO NA View DE LISTAGEM (admin\pages\permissions\index.blade.php) E CODIFICA A LOGICA
 @foreach($permissions as $permission)
                 <tr>
                    <td>{{ $permission->name }}</td>
                    
                    <td style="width: 200px;">
                    <a href="{{ route('permissions.edit',  $permission->id) }}" class="btn btn-warning" title="Edit" ><i class="fas fa-edit"></i></a>
                    <a href="{{ route('permissions.show',  $permission->id) }}" class="btn btn-warning" title="Ver"><i class="fas fa-filter"></i></a>
                    <a href="{{ route('permissions.show',  $permission->id) }}" class="btn btn-warning" title="Perfil Associado"><i class="ffas fa-address-book"></i></a>
                </td>
                    </tr>

----CRIAR ROTA 
Route::get('profiles/{id}/permission/{idPermission}/detach', 'ACL\PermissionProfileController@detachPermissionProfile')->name('profiles.permission.detach');
       Route::post('profiles/{id}/permissions', 'ACL\PermissionProfileController@attachPermissionsProfile')->name('profiles.permissions.attach');
       Route::any('profiles/{id}/permissions/create', 'ACL\PermissionProfileController@permissionsAvailable')->name('profiles.permissions.available');
       Route::get('profiles/{id}/permissions/create', 'ACL\PermissionProfileController@permissionsAvailable')->name('profiles.permissions.available');  
       Route::get('profiles/{id}/permissions', 'ACL\PermissionProfileController@permissions')->name('profiles.permissions');  

       Route::get('permissions/{id}/profiles', 'ACL\PermissionProfileController@profiles')->name('permissions.profiles');  

-----------------E NO NOSSO PermissionProfileController CRIAR O METODO PROFILE
 public function profiles($idPermission)
    {
        if (!$permission = $this->permission->find($idPermission)) {
            return redirect()->back();
        }

        $profiles = $permission->profiles()->paginate();

        return view('admin.pages.permissions.profiles.profiles', compact('permission', 'profiles'));
        
    }

---------------------------E AGORA VAMOS CRIAR UMA view    admin\pages\permission\profiles.blade.php 
@extends('adminlte::page')

@section('title', "Perfis da permissão {$permission->name}")

@section('content_header')
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="{{ route('admin.index') }}">Dashboard</a></li>
        <li class="breadcrumb-item active"><a href="{{ route('permissions.index') }}" class="active">Perfis</a></li>
    </ol>

    <h1>Perfis da permissão <strong>{{ $permission->name }}</strong></h1>

@stop

@section('content')
    <div class="card">
        <div class="card-body">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th width="50">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach ($profiles as $profile)
                        <tr>
                            <td>
                                {{ $profile->name }}
                            </td>
                            <td style="width=10px;">
                                <a href="{{ route('profiles.permission.detach', [$profile->id, $permission->id]) }}" class="btn btn-danger">DESVINCULAR</a>
                            </td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            @if (isset($filters))
                {!! $profiles->appends($filters)->links() !!}
            @else
                {!! $profiles->links() !!}
            @endif
        </div>
    </div>
@stop

----OK PERFEITO, EXIBINDO


7--------------------------------------------------------------------